{
(* File Usql/UsqlLex.fsl 
   Lexer specification for micro-SQL SELECT statements.
   sestoft@itu.dk * 2010-09-10
*)

module UsqlLex
  
open System.Collections.Generic      (* for Dictionary *)
open Microsoft.FSharp.Text.Lexing
open UsqlPar;

let lexemeAsString lexbuf = 
    LexBuffer<char>.LexemeString lexbuf

(* Distinguish keywords from identifiers using function `keyword' below: *)

let keywords = new Dictionary<string, token>()

let _ = List.iter keywords.Add
         [("and",      AND);
          ("false",    CSTBOOL false);
          ("from",     FROM);
          ("not",      NOT);
          ("or",       OR);
          ("select",   SELECT);
          ("true",     CSTBOOL true);
          ("where",    WHERE)]

let keyword s =
    if keywords.ContainsKey(s) then keywords.Item(s)
    else NAME s

let cEscape s = 
    match s with 
    | "\\\\" -> '\\'
    | "\\\"" -> '\"'
    | "\\a"  -> '\007'
    | "\\b"  -> '\008'
    | "\\t"  -> '\t'
    | "\\n"  -> '\n'
    | "\\v"  -> '\011'
    | "\\f"  -> '\012'
    | "\\r"  -> '\r'
    | _      -> failwith "Lexer error: impossible C escape"
    
  (* A string constant is scanned as a list of characters. *)
}
                        
rule Token = parse
  | [' ' '\t' '\r'] { Token lexbuf }
  | '\n'            { lexbuf.EndPos <- lexbuf.EndPos.NextLine; Token lexbuf }
  | ['0'-'9']+      { CSTINT (System.Int32.Parse (lexemeAsString lexbuf)) }
  | ['a'-'z''A'-'Z''_']['a'-'z''A'-'Z''_''0'-'9']*
                    { keyword ((lexemeAsString lexbuf).ToLower()) }
  | '"'['a'-'z''A'-'Z''_']['a'-'z''A'-'Z''_''0'-'9'' ']*'"'
                    { NAME (lexemeAsString lexbuf) }
  | '+'             { PLUS } 
  | '-'             { MINUS } 
  | '*'             { TIMES } 
  | '/'             { DIV } 
  | '%'             { MOD }                     
  | "="             { EQ } 
  | "<>"            { NE }
  | '>'             { GT }
  | '<'             { LT }
  | ">="            { GE }
  | "<="            { LE }
  | '('             { LPAR }
  | ')'             { RPAR }
  | ','             { COMMA }
  | '.'             { DOT }
  | "--"            { SkipToEndLine lexbuf; Token lexbuf }
  | '''             { CSTSTRING (String [] lexbuf) }
  | eof             { EOF }
  | _               { failwith "Lexer error: illegal symbol" }

and SkipToEndLine = parse
  | '\n'            { lexbuf.EndPos <- lexbuf.EndPos.NextLine }
  | eof             { () }
  | _               { SkipToEndLine lexbuf }

and String chars = parse 
  | '''
      { Microsoft.FSharp.Core.String.concat "" (List.map string (List.rev chars)) }
  | '\\' ['\\' '"' 'a' 'b' 't' 'n' 'v' 'f' 'r']
      { String (cEscape (lexemeAsString lexbuf) :: chars) lexbuf }
  | "''" 
      { String ('\'' :: chars) lexbuf }
  | '\\'
      { failwith "Lexer error: illegal escape sequence" }
  | (eof | '\026')
      { failwith "Lexer error: unterminated string" }
  | ['\n' '\r']
      { failwith "Lexer error: newline in string" }
  | ['\000'-'\031' '\127' '\255']
      { failwith "Lexer error: invalid character in string" }
  | _
      { String (char (lexbuf.LexemeChar 0) :: chars) lexbuf }
