%{
 (* File Fun/FunPar.fsy 
    Parser for micro-SML, a small functional language; one-argument functions.
    sestoft@itu.dk * 2009-10-19
  *)

 open Absyn;
%}

%token <int> CSTINT
%token <string> NAME
%token <bool> CSTBOOL
%token <string> PRIM1

%token BEGIN ELSE END FALSE IF IN LET VAL NOT THEN TRUE FST SND
%token TRY WITH EXN RAISE
%token FUN FN RARROW AND
%token PLUS MINUS TIMES DIV MOD
%token EQ NE GT LT GE LE SEQAND SEQOR
%token CONS NIL HEAD TAIL
%token LPAR RPAR SEMICOLON COLON COMMA
%token EOF

%left SEMICOLON               /* lowest precedence  */
%nonassoc LET
%nonassoc END
%nonassoc FUN FN TRY WITH RARROW
%nonassoc IN
%nonassoc IF ELSE
%left SEQOR
%left SEQAND
%left EQ NE 
%left GT LT GE LE
%right CONS
%left PLUS MINUS
%left TIMES DIV MOD
%nonassoc PRIM1 RAISE HEAD TAIL NOT           /* highest precedence  */

%start Main
%type <Absyn.program<'a>> Main
%type <Absyn.valdec<'a>> Valdec
%type <Absyn.expr<'a>> Expr AtExpr Const
%type <Absyn.expr<'a>> AppExpr

%%

Main:
    Valdecs BEGIN Expr END EOF  { Prog($1,$3) }
;

Valdecs:
    /* Empty */                 { []       }
  | Valdec Valdecs              { $1 :: $2 }
;

Valdec:
    FUN NAME NAME EQ Expr AndFunDecs   { Fundecs(($2, $3, $5)::$6) }
  | VAL NAME EQ Expr                   { Valdec($2, $4)            }
  | EXN NAME                           { Exn(ExnVar $2, None)      }
;    

AndFunDecs:
    /* Empty */                         { []                 }
  | AND NAME NAME EQ Expr AndFunDecs    { ($2, $3, $5) :: $6 }     
;

Expr:
    AtExpr                              { $1                                   }
  | AppExpr                             { $1                                   }
  | IF Expr THEN Expr ELSE Expr         { If($2, $4, $6)                       }
  | RAISE Expr                          { Raise($2, None)                      }
  | TRY Expr WITH NAME RARROW Expr      { TryWith($2,ExnVar $4,$6)             }
  | FN NAME RARROW Expr                 { Fun($2, $4, None)                    }
  | PRIM1 Expr                          { Prim1($1, $2, None)                  }
  | MINUS Expr                          { Prim2("-", CstI (0,None), $2, None)  }
  | Expr PLUS  Expr                     { Prim2("+",  $1, $3, None)            }
  | Expr MINUS Expr                     { Prim2("-",  $1, $3, None)            }
  | Expr TIMES Expr                     { Prim2("*",  $1, $3, None)            }
  | Expr DIV   Expr                     { Prim2("/",  $1, $3, None)            } 
  | Expr MOD   Expr                     { Prim2("%",  $1, $3, None)            }
  | Expr EQ    Expr                     { Prim2("=",  $1, $3, None)            }
  | Expr NE    Expr                     { Prim2("<>", $1, $3, None)            }
  | Expr GT    Expr                     { Prim2(">",  $1, $3, None)            }
  | Expr LT    Expr                     { Prim2("<",  $1, $3, None)            }
  | Expr GE    Expr                     { Prim2(">=", $1, $3, None)            }
  | Expr LE    Expr                     { Prim2("<=", $1, $3, None)            }
  | Expr CONS  Expr                     { Prim2("::",$1, $3, None)           }
  | HEAD Expr                           { Prim1("hd", $2, None)                }
  | TAIL Expr                           { Prim1("tl", $2, None)                }
  | Expr SEQAND Expr                    { AndAlso($1, $3, None)                }
  | Expr SEQOR Expr                     { OrElse($1, $3, None)                 }
  | Expr SEMICOLON Expr                 { Seq($1, $3, None)                    }
  | LPAR Expr COMMA Expr RPAR           { Pair($2, $4, None) }
  | FST LPAR Expr RPAR                  { Prim1("fst", $3, None) }
  | SND LPAR Expr RPAR                  { Prim1("snd", $3, None) }
;

AtExpr:
    Const                               { $1                 }
  | NAME                                { Var ($1, None)     }
  | LET Valdecs IN Expr END             { Let($2, $4)        }
  | LPAR Expr RPAR                      { $2                 }
;

AppExpr:
    AtExpr AtExpr                       { Call($1, $2, None,None)     }
  | AppExpr AtExpr                      { Call($1, $2, None,None)     }
;

Const:
    CSTINT                              { CstI($1, None)               }
  | CSTBOOL                             { CstB($1, None)               }
  | NIL                                 { CstN(None)                   }
;
