// Implementation file for parser generated by fsyacc
module FunPar
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "FunPar.fsy"

 (* File Fun/FunPar.fsy 
    Parser for micro-SML, a small functional language; one-argument functions.
    sestoft@itu.dk * 2009-10-19
  *)

 open Absyn;

# 15 "FunPar.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LPAR
  | RPAR
  | SEMICOLON
  | COLON
  | CONS
  | NIL
  | HEAD
  | TAIL
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | SEQAND
  | SEQOR
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | FUN
  | FN
  | RARROW
  | AND
  | TRY
  | WITH
  | EXN
  | RAISE
  | BEGIN
  | ELSE
  | END
  | FALSE
  | IF
  | IN
  | LET
  | VAL
  | NOT
  | THEN
  | TRUE
  | PRIM1 of (string)
  | CSTBOOL of (bool)
  | NAME of (string)
  | CSTINT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_SEMICOLON
    | TOKEN_COLON
    | TOKEN_CONS
    | TOKEN_NIL
    | TOKEN_HEAD
    | TOKEN_TAIL
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_SEQAND
    | TOKEN_SEQOR
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_FUN
    | TOKEN_FN
    | TOKEN_RARROW
    | TOKEN_AND
    | TOKEN_TRY
    | TOKEN_WITH
    | TOKEN_EXN
    | TOKEN_RAISE
    | TOKEN_BEGIN
    | TOKEN_ELSE
    | TOKEN_END
    | TOKEN_FALSE
    | TOKEN_IF
    | TOKEN_IN
    | TOKEN_LET
    | TOKEN_VAL
    | TOKEN_NOT
    | TOKEN_THEN
    | TOKEN_TRUE
    | TOKEN_PRIM1
    | TOKEN_CSTBOOL
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Valdecs
    | NONTERM_Valdec
    | NONTERM_AndFunDecs
    | NONTERM_Expr
    | NONTERM_AtExpr
    | NONTERM_AppExpr
    | NONTERM_Const

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LPAR  -> 1 
  | RPAR  -> 2 
  | SEMICOLON  -> 3 
  | COLON  -> 4 
  | CONS  -> 5 
  | NIL  -> 6 
  | HEAD  -> 7 
  | TAIL  -> 8 
  | EQ  -> 9 
  | NE  -> 10 
  | GT  -> 11 
  | LT  -> 12 
  | GE  -> 13 
  | LE  -> 14 
  | SEQAND  -> 15 
  | SEQOR  -> 16 
  | PLUS  -> 17 
  | MINUS  -> 18 
  | TIMES  -> 19 
  | DIV  -> 20 
  | MOD  -> 21 
  | FUN  -> 22 
  | FN  -> 23 
  | RARROW  -> 24 
  | AND  -> 25 
  | TRY  -> 26 
  | WITH  -> 27 
  | EXN  -> 28 
  | RAISE  -> 29 
  | BEGIN  -> 30 
  | ELSE  -> 31 
  | END  -> 32 
  | FALSE  -> 33 
  | IF  -> 34 
  | IN  -> 35 
  | LET  -> 36 
  | VAL  -> 37 
  | NOT  -> 38 
  | THEN  -> 39 
  | TRUE  -> 40 
  | PRIM1 _ -> 41 
  | CSTBOOL _ -> 42 
  | NAME _ -> 43 
  | CSTINT _ -> 44 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LPAR 
  | 2 -> TOKEN_RPAR 
  | 3 -> TOKEN_SEMICOLON 
  | 4 -> TOKEN_COLON 
  | 5 -> TOKEN_CONS 
  | 6 -> TOKEN_NIL 
  | 7 -> TOKEN_HEAD 
  | 8 -> TOKEN_TAIL 
  | 9 -> TOKEN_EQ 
  | 10 -> TOKEN_NE 
  | 11 -> TOKEN_GT 
  | 12 -> TOKEN_LT 
  | 13 -> TOKEN_GE 
  | 14 -> TOKEN_LE 
  | 15 -> TOKEN_SEQAND 
  | 16 -> TOKEN_SEQOR 
  | 17 -> TOKEN_PLUS 
  | 18 -> TOKEN_MINUS 
  | 19 -> TOKEN_TIMES 
  | 20 -> TOKEN_DIV 
  | 21 -> TOKEN_MOD 
  | 22 -> TOKEN_FUN 
  | 23 -> TOKEN_FN 
  | 24 -> TOKEN_RARROW 
  | 25 -> TOKEN_AND 
  | 26 -> TOKEN_TRY 
  | 27 -> TOKEN_WITH 
  | 28 -> TOKEN_EXN 
  | 29 -> TOKEN_RAISE 
  | 30 -> TOKEN_BEGIN 
  | 31 -> TOKEN_ELSE 
  | 32 -> TOKEN_END 
  | 33 -> TOKEN_FALSE 
  | 34 -> TOKEN_IF 
  | 35 -> TOKEN_IN 
  | 36 -> TOKEN_LET 
  | 37 -> TOKEN_VAL 
  | 38 -> TOKEN_NOT 
  | 39 -> TOKEN_THEN 
  | 40 -> TOKEN_TRUE 
  | 41 -> TOKEN_PRIM1 
  | 42 -> TOKEN_CSTBOOL 
  | 43 -> TOKEN_NAME 
  | 44 -> TOKEN_CSTINT 
  | 47 -> TOKEN_end_of_input
  | 45 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Valdecs 
    | 3 -> NONTERM_Valdecs 
    | 4 -> NONTERM_Valdec 
    | 5 -> NONTERM_Valdec 
    | 6 -> NONTERM_Valdec 
    | 7 -> NONTERM_AndFunDecs 
    | 8 -> NONTERM_AndFunDecs 
    | 9 -> NONTERM_Expr 
    | 10 -> NONTERM_Expr 
    | 11 -> NONTERM_Expr 
    | 12 -> NONTERM_Expr 
    | 13 -> NONTERM_Expr 
    | 14 -> NONTERM_Expr 
    | 15 -> NONTERM_Expr 
    | 16 -> NONTERM_Expr 
    | 17 -> NONTERM_Expr 
    | 18 -> NONTERM_Expr 
    | 19 -> NONTERM_Expr 
    | 20 -> NONTERM_Expr 
    | 21 -> NONTERM_Expr 
    | 22 -> NONTERM_Expr 
    | 23 -> NONTERM_Expr 
    | 24 -> NONTERM_Expr 
    | 25 -> NONTERM_Expr 
    | 26 -> NONTERM_Expr 
    | 27 -> NONTERM_Expr 
    | 28 -> NONTERM_Expr 
    | 29 -> NONTERM_Expr 
    | 30 -> NONTERM_Expr 
    | 31 -> NONTERM_Expr 
    | 32 -> NONTERM_Expr 
    | 33 -> NONTERM_Expr 
    | 34 -> NONTERM_AtExpr 
    | 35 -> NONTERM_AtExpr 
    | 36 -> NONTERM_AtExpr 
    | 37 -> NONTERM_AtExpr 
    | 38 -> NONTERM_AppExpr 
    | 39 -> NONTERM_AppExpr 
    | 40 -> NONTERM_Const 
    | 41 -> NONTERM_Const 
    | 42 -> NONTERM_Const 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 47 
let _fsyacc_tagOfErrorTerminal = 45

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | SEMICOLON  -> "SEMICOLON" 
  | COLON  -> "COLON" 
  | CONS  -> "CONS" 
  | NIL  -> "NIL" 
  | HEAD  -> "HEAD" 
  | TAIL  -> "TAIL" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | GE  -> "GE" 
  | LE  -> "LE" 
  | SEQAND  -> "SEQAND" 
  | SEQOR  -> "SEQOR" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | FUN  -> "FUN" 
  | FN  -> "FN" 
  | RARROW  -> "RARROW" 
  | AND  -> "AND" 
  | TRY  -> "TRY" 
  | WITH  -> "WITH" 
  | EXN  -> "EXN" 
  | RAISE  -> "RAISE" 
  | BEGIN  -> "BEGIN" 
  | ELSE  -> "ELSE" 
  | END  -> "END" 
  | FALSE  -> "FALSE" 
  | IF  -> "IF" 
  | IN  -> "IN" 
  | LET  -> "LET" 
  | VAL  -> "VAL" 
  | NOT  -> "NOT" 
  | THEN  -> "THEN" 
  | TRUE  -> "TRUE" 
  | PRIM1 _ -> "PRIM1" 
  | CSTBOOL _ -> "CSTBOOL" 
  | NAME _ -> "NAME" 
  | CSTINT _ -> "CSTINT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | CONS  -> (null : System.Object) 
  | NIL  -> (null : System.Object) 
  | HEAD  -> (null : System.Object) 
  | TAIL  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | SEQAND  -> (null : System.Object) 
  | SEQOR  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | FN  -> (null : System.Object) 
  | RARROW  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | TRY  -> (null : System.Object) 
  | WITH  -> (null : System.Object) 
  | EXN  -> (null : System.Object) 
  | RAISE  -> (null : System.Object) 
  | BEGIN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | VAL  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | PRIM1 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;3us;65535us;0us;2us;7us;8us;89us;90us;3us;65535us;0us;7us;7us;7us;89us;7us;2us;65535us;13us;14us;25us;26us;32us;65535us;3us;4us;12us;13us;17us;18us;24us;25us;29us;30us;31us;32us;33us;34us;35us;36us;37us;38us;41us;42us;45us;46us;47us;48us;49us;50us;70us;51us;71us;52us;72us;53us;73us;54us;74us;55us;75us;56us;76us;57us;77us;58us;78us;59us;79us;60us;80us;61us;81us;62us;82us;63us;83us;64us;84us;65us;85us;66us;86us;67us;91us;68us;93us;69us;34us;65535us;3us;27us;12us;27us;17us;27us;24us;27us;27us;95us;28us;96us;29us;27us;31us;27us;33us;27us;35us;27us;37us;27us;41us;27us;45us;27us;47us;27us;49us;27us;70us;27us;71us;27us;72us;27us;73us;27us;74us;27us;75us;27us;76us;27us;77us;27us;78us;27us;79us;27us;80us;27us;81us;27us;82us;27us;83us;27us;84us;27us;85us;27us;86us;27us;91us;27us;93us;27us;32us;65535us;3us;28us;12us;28us;17us;28us;24us;28us;29us;28us;31us;28us;33us;28us;35us;28us;37us;28us;41us;28us;45us;28us;47us;28us;49us;28us;70us;28us;71us;28us;72us;28us;73us;28us;74us;28us;75us;28us;76us;28us;77us;28us;78us;28us;79us;28us;80us;28us;81us;28us;82us;28us;83us;28us;84us;28us;85us;28us;86us;28us;91us;28us;93us;28us;34us;65535us;3us;87us;12us;87us;17us;87us;24us;87us;27us;87us;28us;87us;29us;87us;31us;87us;33us;87us;35us;87us;37us;87us;41us;87us;45us;87us;47us;87us;49us;87us;70us;87us;71us;87us;72us;87us;73us;87us;74us;87us;75us;87us;76us;87us;77us;87us;78us;87us;79us;87us;80us;87us;81us;87us;82us;87us;83us;87us;84us;87us;85us;87us;86us;87us;91us;87us;93us;87us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;7us;11us;14us;47us;82us;115us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;1us;16us;1us;17us;18us;19us;20us;21us;22us;23us;24us;25us;26us;27us;28us;31us;32us;33us;1us;1us;1us;1us;1us;3us;1us;3us;1us;4us;1us;4us;1us;4us;1us;4us;16us;4us;17us;18us;19us;20us;21us;22us;23us;24us;25us;26us;27us;28us;31us;32us;33us;1us;4us;1us;5us;1us;5us;1us;5us;16us;5us;17us;18us;19us;20us;21us;22us;23us;24us;25us;26us;27us;28us;31us;32us;33us;1us;6us;1us;6us;1us;8us;1us;8us;1us;8us;1us;8us;16us;8us;17us;18us;19us;20us;21us;22us;23us;24us;25us;26us;27us;28us;31us;32us;33us;1us;8us;2us;9us;38us;2us;10us;39us;1us;11us;16us;11us;17us;18us;19us;20us;21us;22us;23us;24us;25us;26us;27us;28us;31us;32us;33us;1us;11us;16us;11us;17us;18us;19us;20us;21us;22us;23us;24us;25us;26us;27us;28us;31us;32us;33us;1us;11us;16us;11us;17us;18us;19us;20us;21us;22us;23us;24us;25us;26us;27us;28us;31us;32us;33us;1us;12us;16us;12us;17us;18us;19us;20us;21us;22us;23us;24us;25us;26us;27us;28us;31us;32us;33us;1us;13us;16us;13us;17us;18us;19us;20us;21us;22us;23us;24us;25us;26us;27us;28us;31us;32us;33us;1us;13us;1us;13us;1us;13us;16us;13us;17us;18us;19us;20us;21us;22us;23us;24us;25us;26us;27us;28us;31us;32us;33us;1us;14us;1us;14us;1us;14us;16us;14us;17us;18us;19us;20us;21us;22us;23us;24us;25us;26us;27us;28us;31us;32us;33us;1us;15us;16us;15us;17us;18us;19us;20us;21us;22us;23us;24us;25us;26us;27us;28us;31us;32us;33us;1us;16us;16us;16us;17us;18us;19us;20us;21us;22us;23us;24us;25us;26us;27us;28us;31us;32us;33us;16us;17us;17us;18us;19us;20us;21us;22us;23us;24us;25us;26us;27us;28us;31us;32us;33us;16us;17us;18us;18us;19us;20us;21us;22us;23us;24us;25us;26us;27us;28us;31us;32us;33us;16us;17us;18us;19us;19us;20us;21us;22us;23us;24us;25us;26us;27us;28us;31us;32us;33us;16us;17us;18us;19us;20us;20us;21us;22us;23us;24us;25us;26us;27us;28us;31us;32us;33us;16us;17us;18us;19us;20us;21us;21us;22us;23us;24us;25us;26us;27us;28us;31us;32us;33us;16us;17us;18us;19us;20us;21us;22us;22us;23us;24us;25us;26us;27us;28us;31us;32us;33us;16us;17us;18us;19us;20us;21us;22us;23us;23us;24us;25us;26us;27us;28us;31us;32us;33us;16us;17us;18us;19us;20us;21us;22us;23us;24us;24us;25us;26us;27us;28us;31us;32us;33us;16us;17us;18us;19us;20us;21us;22us;23us;24us;25us;25us;26us;27us;28us;31us;32us;33us;16us;17us;18us;19us;20us;21us;22us;23us;24us;25us;26us;26us;27us;28us;31us;32us;33us;16us;17us;18us;19us;20us;21us;22us;23us;24us;25us;26us;27us;27us;28us;31us;32us;33us;16us;17us;18us;19us;20us;21us;22us;23us;24us;25us;26us;27us;28us;28us;31us;32us;33us;16us;17us;18us;19us;20us;21us;22us;23us;24us;25us;26us;27us;28us;29us;31us;32us;33us;16us;17us;18us;19us;20us;21us;22us;23us;24us;25us;26us;27us;28us;30us;31us;32us;33us;16us;17us;18us;19us;20us;21us;22us;23us;24us;25us;26us;27us;28us;31us;31us;32us;33us;16us;17us;18us;19us;20us;21us;22us;23us;24us;25us;26us;27us;28us;31us;32us;32us;33us;16us;17us;18us;19us;20us;21us;22us;23us;24us;25us;26us;27us;28us;31us;32us;33us;33us;16us;17us;18us;19us;20us;21us;22us;23us;24us;25us;26us;27us;28us;31us;32us;33us;36us;16us;17us;18us;19us;20us;21us;22us;23us;24us;25us;26us;27us;28us;31us;32us;33us;37us;1us;17us;1us;18us;1us;19us;1us;20us;1us;21us;1us;22us;1us;23us;1us;24us;1us;25us;1us;26us;1us;27us;1us;28us;1us;29us;1us;30us;1us;31us;1us;32us;1us;33us;1us;34us;1us;35us;1us;36us;1us;36us;1us;36us;1us;36us;1us;37us;1us;37us;1us;38us;1us;39us;1us;40us;1us;41us;1us;42us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;25us;27us;29us;31us;33us;35us;37us;39us;41us;58us;60us;62us;64us;66us;83us;85us;87us;89us;91us;93us;95us;112us;114us;117us;120us;122us;139us;141us;158us;160us;177us;179us;196us;198us;215us;217us;219us;221us;238us;240us;242us;244us;261us;263us;280us;282us;299us;316us;333us;350us;367us;384us;401us;418us;435us;452us;469us;486us;503us;520us;537us;554us;571us;588us;605us;622us;624us;626us;628us;630us;632us;634us;636us;638us;640us;642us;644us;646us;648us;650us;652us;654us;656us;658us;660us;662us;664us;666us;668us;670us;672us;674us;676us;678us;680us;|]
let _fsyacc_action_rows = 100
let _fsyacc_actionTableElements = [|3us;16386us;22us;9us;28us;19us;37us;15us;0us;49152us;1us;32768us;30us;3us;14us;32768us;1us;93us;6us;99us;7us;82us;8us;83us;18us;49us;23us;43us;26us;37us;29us;35us;34us;29us;36us;89us;41us;47us;42us;98us;43us;88us;44us;97us;16us;32768us;3us;86us;5us;81us;9us;75us;10us;76us;11us;77us;12us;78us;13us;79us;14us;80us;15us;84us;16us;85us;17us;70us;18us;71us;19us;72us;20us;73us;21us;74us;32us;5us;1us;32768us;0us;6us;0us;16385us;3us;16386us;22us;9us;28us;19us;37us;15us;0us;16387us;1us;32768us;43us;10us;1us;32768us;43us;11us;1us;32768us;9us;12us;14us;32768us;1us;93us;6us;99us;7us;82us;8us;83us;18us;49us;23us;43us;26us;37us;29us;35us;34us;29us;36us;89us;41us;47us;42us;98us;43us;88us;44us;97us;16us;16391us;3us;86us;5us;81us;9us;75us;10us;76us;11us;77us;12us;78us;13us;79us;14us;80us;15us;84us;16us;85us;17us;70us;18us;71us;19us;72us;20us;73us;21us;74us;25us;21us;0us;16388us;1us;32768us;43us;16us;1us;32768us;9us;17us;14us;32768us;1us;93us;6us;99us;7us;82us;8us;83us;18us;49us;23us;43us;26us;37us;29us;35us;34us;29us;36us;89us;41us;47us;42us;98us;43us;88us;44us;97us;15us;16389us;3us;86us;5us;81us;9us;75us;10us;76us;11us;77us;12us;78us;13us;79us;14us;80us;15us;84us;16us;85us;17us;70us;18us;71us;19us;72us;20us;73us;21us;74us;1us;32768us;43us;20us;0us;16390us;1us;32768us;43us;22us;1us;32768us;43us;23us;1us;32768us;9us;24us;14us;32768us;1us;93us;6us;99us;7us;82us;8us;83us;18us;49us;23us;43us;26us;37us;29us;35us;34us;29us;36us;89us;41us;47us;42us;98us;43us;88us;44us;97us;16us;16391us;3us;86us;5us;81us;9us;75us;10us;76us;11us;77us;12us;78us;13us;79us;14us;80us;15us;84us;16us;85us;17us;70us;18us;71us;19us;72us;20us;73us;21us;74us;25us;21us;0us;16392us;6us;16393us;1us;93us;6us;99us;36us;89us;42us;98us;43us;88us;44us;97us;6us;16394us;1us;93us;6us;99us;36us;89us;42us;98us;43us;88us;44us;97us;14us;32768us;1us;93us;6us;99us;7us;82us;8us;83us;18us;49us;23us;43us;26us;37us;29us;35us;34us;29us;36us;89us;41us;47us;42us;98us;43us;88us;44us;97us;16us;32768us;3us;86us;5us;81us;9us;75us;10us;76us;11us;77us;12us;78us;13us;79us;14us;80us;15us;84us;16us;85us;17us;70us;18us;71us;19us;72us;20us;73us;21us;74us;39us;31us;14us;32768us;1us;93us;6us;99us;7us;82us;8us;83us;18us;49us;23us;43us;26us;37us;29us;35us;34us;29us;36us;89us;41us;47us;42us;98us;43us;88us;44us;97us;16us;32768us;3us;86us;5us;81us;9us;75us;10us;76us;11us;77us;12us;78us;13us;79us;14us;80us;15us;84us;16us;85us;17us;70us;18us;71us;19us;72us;20us;73us;21us;74us;31us;33us;14us;32768us;1us;93us;6us;99us;7us;82us;8us;83us;18us;49us;23us;43us;26us;37us;29us;35us;34us;29us;36us;89us;41us;47us;42us;98us;43us;88us;44us;97us;14us;16395us;5us;81us;9us;75us;10us;76us;11us;77us;12us;78us;13us;79us;14us;80us;15us;84us;16us;85us;17us;70us;18us;71us;19us;72us;20us;73us;21us;74us;14us;32768us;1us;93us;6us;99us;7us;82us;8us;83us;18us;49us;23us;43us;26us;37us;29us;35us;34us;29us;36us;89us;41us;47us;42us;98us;43us;88us;44us;97us;0us;16396us;14us;32768us;1us;93us;6us;99us;7us;82us;8us;83us;18us;49us;23us;43us;26us;37us;29us;35us;34us;29us;36us;89us;41us;47us;42us;98us;43us;88us;44us;97us;16us;32768us;3us;86us;5us;81us;9us;75us;10us;76us;11us;77us;12us;78us;13us;79us;14us;80us;15us;84us;16us;85us;17us;70us;18us;71us;19us;72us;20us;73us;21us;74us;27us;39us;1us;32768us;43us;40us;1us;32768us;24us;41us;14us;32768us;1us;93us;6us;99us;7us;82us;8us;83us;18us;49us;23us;43us;26us;37us;29us;35us;34us;29us;36us;89us;41us;47us;42us;98us;43us;88us;44us;97us;14us;16397us;5us;81us;9us;75us;10us;76us;11us;77us;12us;78us;13us;79us;14us;80us;15us;84us;16us;85us;17us;70us;18us;71us;19us;72us;20us;73us;21us;74us;1us;32768us;43us;44us;1us;32768us;24us;45us;14us;32768us;1us;93us;6us;99us;7us;82us;8us;83us;18us;49us;23us;43us;26us;37us;29us;35us;34us;29us;36us;89us;41us;47us;42us;98us;43us;88us;44us;97us;14us;16398us;5us;81us;9us;75us;10us;76us;11us;77us;12us;78us;13us;79us;14us;80us;15us;84us;16us;85us;17us;70us;18us;71us;19us;72us;20us;73us;21us;74us;14us;32768us;1us;93us;6us;99us;7us;82us;8us;83us;18us;49us;23us;43us;26us;37us;29us;35us;34us;29us;36us;89us;41us;47us;42us;98us;43us;88us;44us;97us;0us;16399us;14us;32768us;1us;93us;6us;99us;7us;82us;8us;83us;18us;49us;23us;43us;26us;37us;29us;35us;34us;29us;36us;89us;41us;47us;42us;98us;43us;88us;44us;97us;3us;16400us;19us;72us;20us;73us;21us;74us;3us;16401us;19us;72us;20us;73us;21us;74us;3us;16402us;19us;72us;20us;73us;21us;74us;0us;16403us;0us;16404us;0us;16405us;10us;16406us;5us;81us;11us;77us;12us;78us;13us;79us;14us;80us;17us;70us;18us;71us;19us;72us;20us;73us;21us;74us;10us;16407us;5us;81us;11us;77us;12us;78us;13us;79us;14us;80us;17us;70us;18us;71us;19us;72us;20us;73us;21us;74us;6us;16408us;5us;81us;17us;70us;18us;71us;19us;72us;20us;73us;21us;74us;6us;16409us;5us;81us;17us;70us;18us;71us;19us;72us;20us;73us;21us;74us;6us;16410us;5us;81us;17us;70us;18us;71us;19us;72us;20us;73us;21us;74us;6us;16411us;5us;81us;17us;70us;18us;71us;19us;72us;20us;73us;21us;74us;6us;16412us;5us;81us;17us;70us;18us;71us;19us;72us;20us;73us;21us;74us;0us;16413us;0us;16414us;12us;16415us;5us;81us;9us;75us;10us;76us;11us;77us;12us;78us;13us;79us;14us;80us;17us;70us;18us;71us;19us;72us;20us;73us;21us;74us;13us;16416us;5us;81us;9us;75us;10us;76us;11us;77us;12us;78us;13us;79us;14us;80us;15us;84us;17us;70us;18us;71us;19us;72us;20us;73us;21us;74us;14us;16417us;5us;81us;9us;75us;10us;76us;11us;77us;12us;78us;13us;79us;14us;80us;15us;84us;16us;85us;17us;70us;18us;71us;19us;72us;20us;73us;21us;74us;16us;32768us;3us;86us;5us;81us;9us;75us;10us;76us;11us;77us;12us;78us;13us;79us;14us;80us;15us;84us;16us;85us;17us;70us;18us;71us;19us;72us;20us;73us;21us;74us;32us;92us;16us;32768us;2us;94us;3us;86us;5us;81us;9us;75us;10us;76us;11us;77us;12us;78us;13us;79us;14us;80us;15us;84us;16us;85us;17us;70us;18us;71us;19us;72us;20us;73us;21us;74us;14us;32768us;1us;93us;6us;99us;7us;82us;8us;83us;18us;49us;23us;43us;26us;37us;29us;35us;34us;29us;36us;89us;41us;47us;42us;98us;43us;88us;44us;97us;14us;32768us;1us;93us;6us;99us;7us;82us;8us;83us;18us;49us;23us;43us;26us;37us;29us;35us;34us;29us;36us;89us;41us;47us;42us;98us;43us;88us;44us;97us;14us;32768us;1us;93us;6us;99us;7us;82us;8us;83us;18us;49us;23us;43us;26us;37us;29us;35us;34us;29us;36us;89us;41us;47us;42us;98us;43us;88us;44us;97us;14us;32768us;1us;93us;6us;99us;7us;82us;8us;83us;18us;49us;23us;43us;26us;37us;29us;35us;34us;29us;36us;89us;41us;47us;42us;98us;43us;88us;44us;97us;14us;32768us;1us;93us;6us;99us;7us;82us;8us;83us;18us;49us;23us;43us;26us;37us;29us;35us;34us;29us;36us;89us;41us;47us;42us;98us;43us;88us;44us;97us;14us;32768us;1us;93us;6us;99us;7us;82us;8us;83us;18us;49us;23us;43us;26us;37us;29us;35us;34us;29us;36us;89us;41us;47us;42us;98us;43us;88us;44us;97us;14us;32768us;1us;93us;6us;99us;7us;82us;8us;83us;18us;49us;23us;43us;26us;37us;29us;35us;34us;29us;36us;89us;41us;47us;42us;98us;43us;88us;44us;97us;14us;32768us;1us;93us;6us;99us;7us;82us;8us;83us;18us;49us;23us;43us;26us;37us;29us;35us;34us;29us;36us;89us;41us;47us;42us;98us;43us;88us;44us;97us;14us;32768us;1us;93us;6us;99us;7us;82us;8us;83us;18us;49us;23us;43us;26us;37us;29us;35us;34us;29us;36us;89us;41us;47us;42us;98us;43us;88us;44us;97us;14us;32768us;1us;93us;6us;99us;7us;82us;8us;83us;18us;49us;23us;43us;26us;37us;29us;35us;34us;29us;36us;89us;41us;47us;42us;98us;43us;88us;44us;97us;14us;32768us;1us;93us;6us;99us;7us;82us;8us;83us;18us;49us;23us;43us;26us;37us;29us;35us;34us;29us;36us;89us;41us;47us;42us;98us;43us;88us;44us;97us;14us;32768us;1us;93us;6us;99us;7us;82us;8us;83us;18us;49us;23us;43us;26us;37us;29us;35us;34us;29us;36us;89us;41us;47us;42us;98us;43us;88us;44us;97us;14us;32768us;1us;93us;6us;99us;7us;82us;8us;83us;18us;49us;23us;43us;26us;37us;29us;35us;34us;29us;36us;89us;41us;47us;42us;98us;43us;88us;44us;97us;14us;32768us;1us;93us;6us;99us;7us;82us;8us;83us;18us;49us;23us;43us;26us;37us;29us;35us;34us;29us;36us;89us;41us;47us;42us;98us;43us;88us;44us;97us;14us;32768us;1us;93us;6us;99us;7us;82us;8us;83us;18us;49us;23us;43us;26us;37us;29us;35us;34us;29us;36us;89us;41us;47us;42us;98us;43us;88us;44us;97us;14us;32768us;1us;93us;6us;99us;7us;82us;8us;83us;18us;49us;23us;43us;26us;37us;29us;35us;34us;29us;36us;89us;41us;47us;42us;98us;43us;88us;44us;97us;14us;32768us;1us;93us;6us;99us;7us;82us;8us;83us;18us;49us;23us;43us;26us;37us;29us;35us;34us;29us;36us;89us;41us;47us;42us;98us;43us;88us;44us;97us;0us;16418us;0us;16419us;3us;16386us;22us;9us;28us;19us;37us;15us;1us;32768us;35us;91us;14us;32768us;1us;93us;6us;99us;7us;82us;8us;83us;18us;49us;23us;43us;26us;37us;29us;35us;34us;29us;36us;89us;41us;47us;42us;98us;43us;88us;44us;97us;0us;16420us;14us;32768us;1us;93us;6us;99us;7us;82us;8us;83us;18us;49us;23us;43us;26us;37us;29us;35us;34us;29us;36us;89us;41us;47us;42us;98us;43us;88us;44us;97us;0us;16421us;0us;16422us;0us;16423us;0us;16424us;0us;16425us;0us;16426us;|]
let _fsyacc_actionTableRowOffsets = [|0us;4us;5us;7us;22us;39us;41us;42us;46us;47us;49us;51us;53us;68us;85us;86us;88us;90us;105us;121us;123us;124us;126us;128us;130us;145us;162us;163us;170us;177us;192us;209us;224us;241us;256us;271us;286us;287us;302us;319us;321us;323us;338us;353us;355us;357us;372us;387us;402us;403us;418us;422us;426us;430us;431us;432us;433us;444us;455us;462us;469us;476us;483us;490us;491us;492us;505us;519us;534us;551us;568us;583us;598us;613us;628us;643us;658us;673us;688us;703us;718us;733us;748us;763us;778us;793us;808us;823us;824us;825us;829us;831us;846us;847us;862us;863us;864us;865us;866us;867us;|]
let _fsyacc_reductionSymbolCounts = [|1us;5us;0us;2us;6us;4us;2us;0us;6us;1us;1us;6us;2us;6us;4us;2us;2us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;2us;2us;3us;3us;3us;1us;1us;5us;3us;2us;2us;1us;1us;1us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;3us;3us;3us;4us;4us;5us;5us;5us;5us;5us;5us;5us;5us;5us;5us;5us;5us;5us;5us;5us;5us;5us;5us;5us;5us;5us;5us;5us;5us;5us;6us;6us;6us;6us;7us;7us;8us;8us;8us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;65535us;65535us;65535us;16385us;65535us;16387us;65535us;65535us;65535us;65535us;65535us;16388us;65535us;65535us;65535us;65535us;65535us;16390us;65535us;65535us;65535us;65535us;65535us;16392us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16418us;16419us;65535us;65535us;65535us;16420us;65535us;16421us;16422us;16423us;16424us;16425us;16426us;|]
let _fsyacc_reductions = lazy [|
# 384 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.program<'a> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startMain));
# 393 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Valdecs in
            let _3 = parseState.GetInput(3) :?> Absyn.expr<'a> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "FunPar.fsy"
                                                       Prog(_1,_3) 
                   )
# 48 "FunPar.fsy"
                 : Absyn.program<'a>));
# 405 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "FunPar.fsy"
                                                       []       
                   )
# 52 "FunPar.fsy"
                 : 'gentype_Valdecs));
# 415 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.valdec<'a> in
            let _2 = parseState.GetInput(2) :?> 'gentype_Valdecs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "FunPar.fsy"
                                                       _1 :: _2 
                   )
# 53 "FunPar.fsy"
                 : 'gentype_Valdecs));
# 427 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> string in
            let _5 = parseState.GetInput(5) :?> Absyn.expr<'a> in
            let _6 = parseState.GetInput(6) :?> 'gentype_AndFunDecs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "FunPar.fsy"
                                                              Fundecs((_2, _3, _5)::_6) 
                   )
# 57 "FunPar.fsy"
                 : Absyn.valdec<'a>));
# 441 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> Absyn.expr<'a> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "FunPar.fsy"
                                                              Valdec(_2, _4)            
                   )
# 58 "FunPar.fsy"
                 : Absyn.valdec<'a>));
# 453 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "FunPar.fsy"
                                                              Exn(ExnVar _2, None)      
                   )
# 59 "FunPar.fsy"
                 : Absyn.valdec<'a>));
# 464 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "FunPar.fsy"
                                                               []                 
                   )
# 63 "FunPar.fsy"
                 : 'gentype_AndFunDecs));
# 474 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> string in
            let _5 = parseState.GetInput(5) :?> Absyn.expr<'a> in
            let _6 = parseState.GetInput(6) :?> 'gentype_AndFunDecs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "FunPar.fsy"
                                                               (_2, _3, _5) :: _6 
                   )
# 64 "FunPar.fsy"
                 : 'gentype_AndFunDecs));
# 488 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr<'a> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "FunPar.fsy"
                                                               _1                                   
                   )
# 68 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 499 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr<'a> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "FunPar.fsy"
                                                               _1                                   
                   )
# 69 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 510 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Absyn.expr<'a> in
            let _4 = parseState.GetInput(4) :?> Absyn.expr<'a> in
            let _6 = parseState.GetInput(6) :?> Absyn.expr<'a> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "FunPar.fsy"
                                                               If(_2, _4, _6)                       
                   )
# 70 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 523 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Absyn.expr<'a> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "FunPar.fsy"
                                                               Raise(_2, None)                      
                   )
# 71 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 534 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Absyn.expr<'a> in
            let _4 = parseState.GetInput(4) :?> string in
            let _6 = parseState.GetInput(6) :?> Absyn.expr<'a> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "FunPar.fsy"
                                                               TryWith(_2,ExnVar _4,_6)             
                   )
# 72 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 547 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> Absyn.expr<'a> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "FunPar.fsy"
                                                               Fun(_2, _4, None)                    
                   )
# 73 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 559 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> Absyn.expr<'a> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "FunPar.fsy"
                                                               Prim1(_1, _2, None)                  
                   )
# 74 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 571 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Absyn.expr<'a> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "FunPar.fsy"
                                                               Prim2("-", CstI (0,None), _2, None)  
                   )
# 75 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 582 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr<'a> in
            let _3 = parseState.GetInput(3) :?> Absyn.expr<'a> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "FunPar.fsy"
                                                               Prim2("+",  _1, _3, None)            
                   )
# 76 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 594 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr<'a> in
            let _3 = parseState.GetInput(3) :?> Absyn.expr<'a> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "FunPar.fsy"
                                                               Prim2("-",  _1, _3, None)            
                   )
# 77 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 606 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr<'a> in
            let _3 = parseState.GetInput(3) :?> Absyn.expr<'a> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "FunPar.fsy"
                                                               Prim2("*",  _1, _3, None)            
                   )
# 78 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 618 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr<'a> in
            let _3 = parseState.GetInput(3) :?> Absyn.expr<'a> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "FunPar.fsy"
                                                               Prim2("/",  _1, _3, None)            
                   )
# 79 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 630 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr<'a> in
            let _3 = parseState.GetInput(3) :?> Absyn.expr<'a> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "FunPar.fsy"
                                                               Prim2("%",  _1, _3, None)            
                   )
# 80 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 642 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr<'a> in
            let _3 = parseState.GetInput(3) :?> Absyn.expr<'a> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "FunPar.fsy"
                                                               Prim2("=",  _1, _3, None)            
                   )
# 81 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 654 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr<'a> in
            let _3 = parseState.GetInput(3) :?> Absyn.expr<'a> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "FunPar.fsy"
                                                               Prim2("<>", _1, _3, None)            
                   )
# 82 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 666 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr<'a> in
            let _3 = parseState.GetInput(3) :?> Absyn.expr<'a> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "FunPar.fsy"
                                                               Prim2(">",  _1, _3, None)            
                   )
# 83 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 678 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr<'a> in
            let _3 = parseState.GetInput(3) :?> Absyn.expr<'a> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "FunPar.fsy"
                                                               Prim2("<",  _1, _3, None)            
                   )
# 84 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 690 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr<'a> in
            let _3 = parseState.GetInput(3) :?> Absyn.expr<'a> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "FunPar.fsy"
                                                               Prim2(">=", _1, _3, None)            
                   )
# 85 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 702 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr<'a> in
            let _3 = parseState.GetInput(3) :?> Absyn.expr<'a> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "FunPar.fsy"
                                                               Prim2("<=", _1, _3, None)            
                   )
# 86 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 714 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr<'a> in
            let _3 = parseState.GetInput(3) :?> Absyn.expr<'a> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "FunPar.fsy"
                                                               Prim2("::",_1, _3, None)           
                   )
# 87 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 726 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Absyn.expr<'a> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "FunPar.fsy"
                                                               Prim1("hd", _2, None)                
                   )
# 88 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 737 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Absyn.expr<'a> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "FunPar.fsy"
                                                               Prim1("tl", _2, None)                
                   )
# 89 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 748 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr<'a> in
            let _3 = parseState.GetInput(3) :?> Absyn.expr<'a> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "FunPar.fsy"
                                                               AndAlso(_1, _3, None)                
                   )
# 90 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 760 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr<'a> in
            let _3 = parseState.GetInput(3) :?> Absyn.expr<'a> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "FunPar.fsy"
                                                               OrElse(_1, _3, None)                 
                   )
# 91 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 772 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr<'a> in
            let _3 = parseState.GetInput(3) :?> Absyn.expr<'a> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "FunPar.fsy"
                                                               Seq(_1, _3, None)                    
                   )
# 92 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 784 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr<'a> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "FunPar.fsy"
                                                               _1                 
                   )
# 96 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 795 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "FunPar.fsy"
                                                               Var (_1, None)     
                   )
# 97 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 806 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Valdecs in
            let _4 = parseState.GetInput(4) :?> Absyn.expr<'a> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "FunPar.fsy"
                                                               Let(_2, _4)        
                   )
# 98 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 818 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Absyn.expr<'a> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "FunPar.fsy"
                                                               _2                 
                   )
# 99 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 829 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr<'a> in
            let _2 = parseState.GetInput(2) :?> Absyn.expr<'a> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "FunPar.fsy"
                                                               Call(_1, _2, None,None)     
                   )
# 103 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 841 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr<'a> in
            let _2 = parseState.GetInput(2) :?> Absyn.expr<'a> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "FunPar.fsy"
                                                               Call(_1, _2, None,None)     
                   )
# 104 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 853 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "FunPar.fsy"
                                                               CstI(_1, None)               
                   )
# 108 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 864 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> bool in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "FunPar.fsy"
                                                               CstB(_1, None)               
                   )
# 109 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 875 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "FunPar.fsy"
                                                               CstN(None)                   
                   )
# 110 "FunPar.fsy"
                 : Absyn.expr<'a>));
|]
# 886 "FunPar.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 48;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.program<'a> =
    engine lexer lexbuf 0 :?> _
