// Implementation file for parser generated by fsyacc
module CPar
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "CPar.fsy"

(*	File MicroC/CPar.fsy 
	Parser specification for micro-C, a small imperative language
	sestoft@itu.dk * 2009-09-29
	No (real) shift/reduce conflicts thanks to Niels Kokholm.
*)

open Absyn

let compose1 f (g, s) = ((fun x -> g(f(x))), s)
let nl = CstI 10

# 19 "CPar.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | LPARBAR
  | RPARBAR
  | SEMI
  | COMMA
  | ASSIGN
  | AMP
  | NOT
  | SEQOR
  | SEQAND
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | CHAR
  | ELSE
  | IF
  | INT
  | NULL
  | PRINT
  | PRINTLN
  | RETURN
  | VOID
  | WHILE
  | CSTSTRING of (string)
  | NAME of (string)
  | CSTINT of (int)
  | CSTBOOL of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_LPARBAR
    | TOKEN_RPARBAR
    | TOKEN_SEMI
    | TOKEN_COMMA
    | TOKEN_ASSIGN
    | TOKEN_AMP
    | TOKEN_NOT
    | TOKEN_SEQOR
    | TOKEN_SEQAND
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_CHAR
    | TOKEN_ELSE
    | TOKEN_IF
    | TOKEN_INT
    | TOKEN_NULL
    | TOKEN_PRINT
    | TOKEN_PRINTLN
    | TOKEN_RETURN
    | TOKEN_VOID
    | TOKEN_WHILE
    | TOKEN_CSTSTRING
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_CSTBOOL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Topdecs
    | NONTERM_Topdec
    | NONTERM_Vardec
    | NONTERM_Vardesc
    | NONTERM_Fundec
    | NONTERM_Paramdecs
    | NONTERM_Paramdecs1
    | NONTERM_Block
    | NONTERM_StmtOrDecSeq
    | NONTERM_Stmt
    | NONTERM_StmtM
    | NONTERM_StmtU
    | NONTERM_Expr
    | NONTERM_ExprNotAccess
    | NONTERM_AtExprNotAccess
    | NONTERM_Access
    | NONTERM_Exprs
    | NONTERM_Exprs1
    | NONTERM_Const
    | NONTERM_Type

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LPAR  -> 1 
  | RPAR  -> 2 
  | LBRACE  -> 3 
  | RBRACE  -> 4 
  | LBRACK  -> 5 
  | RBRACK  -> 6 
  | LPARBAR  -> 7 
  | RPARBAR  -> 8 
  | SEMI  -> 9 
  | COMMA  -> 10 
  | ASSIGN  -> 11 
  | AMP  -> 12 
  | NOT  -> 13 
  | SEQOR  -> 14 
  | SEQAND  -> 15 
  | EQ  -> 16 
  | NE  -> 17 
  | GT  -> 18 
  | LT  -> 19 
  | GE  -> 20 
  | LE  -> 21 
  | PLUS  -> 22 
  | MINUS  -> 23 
  | TIMES  -> 24 
  | DIV  -> 25 
  | MOD  -> 26 
  | CHAR  -> 27 
  | ELSE  -> 28 
  | IF  -> 29 
  | INT  -> 30 
  | NULL  -> 31 
  | PRINT  -> 32 
  | PRINTLN  -> 33 
  | RETURN  -> 34 
  | VOID  -> 35 
  | WHILE  -> 36 
  | CSTSTRING _ -> 37 
  | NAME _ -> 38 
  | CSTINT _ -> 39 
  | CSTBOOL _ -> 40 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LPAR 
  | 2 -> TOKEN_RPAR 
  | 3 -> TOKEN_LBRACE 
  | 4 -> TOKEN_RBRACE 
  | 5 -> TOKEN_LBRACK 
  | 6 -> TOKEN_RBRACK 
  | 7 -> TOKEN_LPARBAR 
  | 8 -> TOKEN_RPARBAR 
  | 9 -> TOKEN_SEMI 
  | 10 -> TOKEN_COMMA 
  | 11 -> TOKEN_ASSIGN 
  | 12 -> TOKEN_AMP 
  | 13 -> TOKEN_NOT 
  | 14 -> TOKEN_SEQOR 
  | 15 -> TOKEN_SEQAND 
  | 16 -> TOKEN_EQ 
  | 17 -> TOKEN_NE 
  | 18 -> TOKEN_GT 
  | 19 -> TOKEN_LT 
  | 20 -> TOKEN_GE 
  | 21 -> TOKEN_LE 
  | 22 -> TOKEN_PLUS 
  | 23 -> TOKEN_MINUS 
  | 24 -> TOKEN_TIMES 
  | 25 -> TOKEN_DIV 
  | 26 -> TOKEN_MOD 
  | 27 -> TOKEN_CHAR 
  | 28 -> TOKEN_ELSE 
  | 29 -> TOKEN_IF 
  | 30 -> TOKEN_INT 
  | 31 -> TOKEN_NULL 
  | 32 -> TOKEN_PRINT 
  | 33 -> TOKEN_PRINTLN 
  | 34 -> TOKEN_RETURN 
  | 35 -> TOKEN_VOID 
  | 36 -> TOKEN_WHILE 
  | 37 -> TOKEN_CSTSTRING 
  | 38 -> TOKEN_NAME 
  | 39 -> TOKEN_CSTINT 
  | 40 -> TOKEN_CSTBOOL 
  | 43 -> TOKEN_end_of_input
  | 41 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Topdecs 
    | 3 -> NONTERM_Topdecs 
    | 4 -> NONTERM_Topdec 
    | 5 -> NONTERM_Topdec 
    | 6 -> NONTERM_Vardec 
    | 7 -> NONTERM_Vardesc 
    | 8 -> NONTERM_Vardesc 
    | 9 -> NONTERM_Vardesc 
    | 10 -> NONTERM_Vardesc 
    | 11 -> NONTERM_Vardesc 
    | 12 -> NONTERM_Vardesc 
    | 13 -> NONTERM_Vardesc 
    | 14 -> NONTERM_Fundec 
    | 15 -> NONTERM_Fundec 
    | 16 -> NONTERM_Paramdecs 
    | 17 -> NONTERM_Paramdecs 
    | 18 -> NONTERM_Paramdecs1 
    | 19 -> NONTERM_Paramdecs1 
    | 20 -> NONTERM_Block 
    | 21 -> NONTERM_StmtOrDecSeq 
    | 22 -> NONTERM_StmtOrDecSeq 
    | 23 -> NONTERM_StmtOrDecSeq 
    | 24 -> NONTERM_Stmt 
    | 25 -> NONTERM_Stmt 
    | 26 -> NONTERM_StmtM 
    | 27 -> NONTERM_StmtM 
    | 28 -> NONTERM_StmtM 
    | 29 -> NONTERM_StmtM 
    | 30 -> NONTERM_StmtM 
    | 31 -> NONTERM_StmtM 
    | 32 -> NONTERM_StmtU 
    | 33 -> NONTERM_StmtU 
    | 34 -> NONTERM_StmtU 
    | 35 -> NONTERM_Expr 
    | 36 -> NONTERM_Expr 
    | 37 -> NONTERM_ExprNotAccess 
    | 38 -> NONTERM_ExprNotAccess 
    | 39 -> NONTERM_ExprNotAccess 
    | 40 -> NONTERM_ExprNotAccess 
    | 41 -> NONTERM_ExprNotAccess 
    | 42 -> NONTERM_ExprNotAccess 
    | 43 -> NONTERM_ExprNotAccess 
    | 44 -> NONTERM_ExprNotAccess 
    | 45 -> NONTERM_ExprNotAccess 
    | 46 -> NONTERM_ExprNotAccess 
    | 47 -> NONTERM_ExprNotAccess 
    | 48 -> NONTERM_ExprNotAccess 
    | 49 -> NONTERM_ExprNotAccess 
    | 50 -> NONTERM_ExprNotAccess 
    | 51 -> NONTERM_ExprNotAccess 
    | 52 -> NONTERM_ExprNotAccess 
    | 53 -> NONTERM_ExprNotAccess 
    | 54 -> NONTERM_ExprNotAccess 
    | 55 -> NONTERM_ExprNotAccess 
    | 56 -> NONTERM_AtExprNotAccess 
    | 57 -> NONTERM_AtExprNotAccess 
    | 58 -> NONTERM_AtExprNotAccess 
    | 59 -> NONTERM_Access 
    | 60 -> NONTERM_Access 
    | 61 -> NONTERM_Access 
    | 62 -> NONTERM_Access 
    | 63 -> NONTERM_Access 
    | 64 -> NONTERM_Access 
    | 65 -> NONTERM_Exprs 
    | 66 -> NONTERM_Exprs 
    | 67 -> NONTERM_Exprs1 
    | 68 -> NONTERM_Exprs1 
    | 69 -> NONTERM_Const 
    | 70 -> NONTERM_Const 
    | 71 -> NONTERM_Const 
    | 72 -> NONTERM_Const 
    | 73 -> NONTERM_Type 
    | 74 -> NONTERM_Type 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 43 
let _fsyacc_tagOfErrorTerminal = 41

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | LPARBAR  -> "LPARBAR" 
  | RPARBAR  -> "RPARBAR" 
  | SEMI  -> "SEMI" 
  | COMMA  -> "COMMA" 
  | ASSIGN  -> "ASSIGN" 
  | AMP  -> "AMP" 
  | NOT  -> "NOT" 
  | SEQOR  -> "SEQOR" 
  | SEQAND  -> "SEQAND" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | GE  -> "GE" 
  | LE  -> "LE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | CHAR  -> "CHAR" 
  | ELSE  -> "ELSE" 
  | IF  -> "IF" 
  | INT  -> "INT" 
  | NULL  -> "NULL" 
  | PRINT  -> "PRINT" 
  | PRINTLN  -> "PRINTLN" 
  | RETURN  -> "RETURN" 
  | VOID  -> "VOID" 
  | WHILE  -> "WHILE" 
  | CSTSTRING _ -> "CSTSTRING" 
  | NAME _ -> "NAME" 
  | CSTINT _ -> "CSTINT" 
  | CSTBOOL _ -> "CSTBOOL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | LPARBAR  -> (null : System.Object) 
  | RPARBAR  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | AMP  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | SEQOR  -> (null : System.Object) 
  | SEQAND  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | CHAR  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | PRINTLN  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | VOID  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | CSTSTRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;2us;65535us;0us;2us;4us;5us;2us;65535us;0us;4us;4us;4us;8us;65535us;0us;6us;4us;6us;29us;38us;33us;38us;39us;38us;41us;46us;44us;46us;47us;46us;4us;65535us;9us;11us;10us;11us;14us;15us;16us;17us;2us;65535us;0us;8us;4us;8us;2us;65535us;29us;30us;33us;34us;3us;65535us;29us;37us;33us;37us;39us;40us;8us;65535us;31us;32us;35us;36us;41us;58us;44us;58us;47us;58us;62us;58us;63us;58us;68us;58us;3us;65535us;41us;42us;44us;45us;47us;48us;4us;65535us;41us;44us;44us;44us;47us;44us;62us;71us;6us;65535us;41us;49us;44us;49us;47us;49us;62us;50us;63us;64us;68us;69us;6us;65535us;41us;51us;44us;51us;47us;51us;62us;51us;63us;70us;68us;72us;30us;65535us;41us;52us;44us;52us;47us;52us;54us;56us;60us;61us;62us;52us;63us;52us;66us;67us;68us;52us;78us;79us;81us;105us;84us;85us;86us;87us;106us;89us;107us;90us;108us;91us;109us;92us;110us;93us;111us;94us;112us;95us;113us;96us;114us;97us;115us;98us;116us;99us;117us;100us;118us;102us;120us;101us;131us;103us;133us;104us;136us;105us;30us;65535us;41us;75us;44us;75us;47us;75us;54us;75us;60us;75us;62us;75us;63us;75us;66us;75us;68us;75us;78us;75us;81us;75us;84us;75us;86us;75us;106us;75us;107us;75us;108us;75us;109us;75us;110us;75us;111us;75us;112us;75us;113us;75us;114us;75us;115us;75us;116us;75us;117us;75us;118us;75us;120us;76us;131us;75us;133us;75us;136us;75us;31us;65535us;41us;77us;44us;77us;47us;77us;54us;77us;60us;77us;62us;77us;63us;77us;66us;77us;68us;77us;78us;77us;81us;77us;84us;77us;86us;77us;106us;77us;107us;77us;108us;77us;109us;77us;110us;77us;111us;77us;112us;77us;113us;77us;114us;77us;115us;77us;116us;77us;117us;77us;118us;77us;120us;77us;128us;130us;131us;77us;133us;77us;136us;77us;33us;65535us;41us;74us;44us;74us;47us;74us;54us;74us;60us;74us;62us;74us;63us;74us;66us;74us;68us;74us;78us;74us;81us;74us;84us;74us;86us;74us;106us;74us;107us;74us;108us;74us;109us;74us;110us;74us;111us;74us;112us;74us;113us;74us;114us;74us;115us;74us;116us;74us;117us;74us;118us;74us;120us;73us;122us;123us;125us;126us;128us;129us;131us;74us;133us;74us;136us;74us;1us;65535us;81us;82us;2us;65535us;81us;135us;136us;137us;31us;65535us;41us;119us;44us;119us;47us;119us;54us;119us;60us;119us;62us;119us;63us;119us;66us;119us;68us;119us;78us;119us;81us;119us;84us;119us;86us;119us;106us;119us;107us;119us;108us;119us;109us;119us;110us;119us;111us;119us;112us;119us;113us;119us;114us;119us;115us;119us;116us;119us;117us;119us;118us;119us;120us;119us;128us;119us;131us;119us;133us;119us;136us;119us;8us;65535us;0us;10us;4us;10us;29us;9us;33us;9us;39us;9us;41us;9us;44us;9us;47us;9us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;6us;9us;18us;23us;26us;29us;33us;42us;46us;51us;58us;65us;96us;127us;159us;193us;195us;198us;230us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;1us;1us;3us;1us;3us;1us;4us;1us;4us;1us;5us;1us;6us;2us;6us;15us;5us;6us;10us;11us;12us;13us;1us;7us;2us;7us;15us;1us;8us;5us;8us;10us;11us;12us;13us;1us;9us;5us;9us;10us;11us;12us;13us;1us;9us;2us;10us;11us;1us;10us;1us;11us;1us;11us;2us;12us;13us;1us;12us;1us;12us;1us;13us;1us;14us;1us;14us;1us;14us;1us;14us;1us;14us;1us;14us;1us;15us;1us;15us;1us;15us;1us;15us;1us;17us;2us;18us;19us;1us;19us;1us;19us;1us;20us;1us;20us;1us;20us;1us;22us;1us;22us;1us;23us;1us;23us;1us;23us;1us;24us;3us;24us;30us;32us;1us;25us;14us;26us;43us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;1us;26us;2us;27us;28us;1us;27us;14us;28us;43us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;1us;28us;1us;29us;3us;30us;32us;33us;3us;30us;32us;33us;16us;30us;32us;33us;43us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;3us;30us;32us;33us;2us;30us;32us;1us;30us;2us;31us;34us;2us;31us;34us;15us;31us;34us;43us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;2us;31us;34us;1us;31us;1us;32us;1us;33us;1us;34us;5us;35us;38us;60us;63us;64us;4us;35us;38us;63us;64us;1us;36us;2us;36us;57us;1us;37us;1us;38us;14us;38us;43us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;2us;39us;59us;1us;39us;1us;39us;1us;39us;1us;40us;14us;40us;43us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;1us;41us;14us;41us;43us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;1us;42us;14us;43us;43us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;14us;43us;44us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;14us;43us;44us;45us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;14us;43us;44us;45us;46us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;14us;43us;44us;45us;46us;47us;47us;48us;49us;50us;51us;52us;53us;54us;55us;14us;43us;44us;45us;46us;47us;48us;48us;49us;50us;51us;52us;53us;54us;55us;14us;43us;44us;45us;46us;47us;48us;49us;49us;50us;51us;52us;53us;54us;55us;14us;43us;44us;45us;46us;47us;48us;49us;50us;50us;51us;52us;53us;54us;55us;14us;43us;44us;45us;46us;47us;48us;49us;50us;51us;51us;52us;53us;54us;55us;14us;43us;44us;45us;46us;47us;48us;49us;50us;51us;52us;52us;53us;54us;55us;14us;43us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;53us;54us;55us;14us;43us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;54us;55us;13us;43us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;14us;43us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;55us;14us;43us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;63us;14us;43us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;64us;15us;43us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;67us;68us;1us;43us;1us;44us;1us;45us;1us;46us;1us;47us;1us;48us;1us;49us;1us;50us;1us;51us;1us;52us;1us;53us;1us;54us;1us;55us;1us;56us;2us;57us;60us;1us;57us;1us;58us;3us;58us;63us;64us;1us;59us;1us;60us;3us;60us;63us;64us;1us;60us;2us;61us;62us;3us;61us;63us;64us;1us;62us;1us;63us;1us;63us;1us;64us;1us;64us;1us;66us;1us;68us;1us;68us;1us;69us;1us;70us;1us;71us;1us;71us;1us;72us;1us;73us;1us;74us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;10us;12us;14us;16us;18us;20us;23us;29us;31us;34us;36us;42us;44us;50us;52us;55us;57us;59us;61us;64us;66us;68us;70us;72us;74us;76us;78us;80us;82us;84us;86us;88us;90us;92us;95us;97us;99us;101us;103us;105us;107us;109us;111us;113us;115us;117us;121us;123us;138us;140us;143us;145us;160us;162us;164us;168us;172us;189us;193us;196us;198us;201us;204us;220us;223us;225us;227us;229us;231us;237us;242us;244us;247us;249us;251us;266us;269us;271us;273us;275us;277us;292us;294us;309us;311us;326us;341us;356us;371us;386us;401us;416us;431us;446us;461us;476us;491us;505us;520us;535us;550us;566us;568us;570us;572us;574us;576us;578us;580us;582us;584us;586us;588us;590us;592us;594us;597us;599us;601us;605us;607us;609us;613us;615us;618us;622us;624us;626us;628us;630us;632us;634us;636us;638us;640us;642us;644us;646us;648us;650us;|]
let _fsyacc_action_rows = 145
let _fsyacc_actionTableElements = [|3us;16386us;27us;144us;30us;143us;35us;27us;0us;49152us;1us;32768us;0us;3us;0us;16385us;3us;16386us;27us;144us;30us;143us;35us;27us;0us;16387us;1us;32768us;9us;7us;0us;16388us;0us;16389us;3us;32768us;1us;16us;24us;14us;38us;12us;3us;32768us;1us;16us;24us;14us;38us;13us;2us;16390us;5us;19us;7us;23us;0us;16391us;1us;16391us;1us;33us;3us;32768us;1us;16us;24us;14us;38us;12us;2us;16392us;5us;19us;7us;23us;3us;32768us;1us;16us;24us;14us;38us;12us;3us;32768us;2us;18us;5us;19us;7us;23us;0us;16393us;2us;32768us;6us;20us;39us;21us;0us;16394us;1us;32768us;6us;22us;0us;16395us;2us;32768us;8us;26us;39us;24us;1us;32768us;8us;25us;0us;16396us;0us;16397us;1us;32768us;38us;28us;1us;32768us;1us;29us;2us;16400us;27us;144us;30us;143us;1us;32768us;2us;31us;1us;32768us;3us;41us;0us;16398us;2us;16400us;27us;144us;30us;143us;1us;32768us;2us;35us;1us;32768us;3us;41us;0us;16399us;0us;16401us;1us;16402us;10us;39us;2us;32768us;27us;144us;30us;143us;0us;16403us;17us;16405us;1us;120us;3us;41us;12us;122us;13us;84us;23us;140us;24us;128us;27us;144us;29us;59us;30us;143us;31us;142us;32us;86us;33us;88us;34us;54us;36us;65us;38us;80us;39us;138us;40us;139us;1us;32768us;4us;43us;0us;16404us;17us;16405us;1us;120us;3us;41us;12us;122us;13us;84us;23us;140us;24us;128us;27us;144us;29us;59us;30us;143us;31us;142us;32us;86us;33us;88us;34us;54us;36us;65us;38us;80us;39us;138us;40us;139us;0us;16406us;1us;32768us;9us;47us;17us;16405us;1us;120us;3us;41us;12us;122us;13us;84us;23us;140us;24us;128us;27us;144us;29us;59us;30us;143us;31us;142us;32us;86us;33us;88us;34us;54us;36us;65us;38us;80us;39us;138us;40us;139us;0us;16407us;0us;16408us;1us;16408us;28us;63us;0us;16409us;14us;32768us;9us;53us;14us;118us;15us;117us;16us;111us;17us;112us;18us;113us;19us;114us;20us;115us;21us;116us;22us;106us;23us;107us;24us;108us;25us;109us;26us;110us;0us;16410us;12us;32768us;1us;120us;9us;55us;12us;122us;13us;84us;23us;140us;24us;128us;31us;142us;32us;86us;33us;88us;38us;80us;39us;138us;40us;139us;0us;16411us;14us;32768us;9us;57us;14us;118us;15us;117us;16us;111us;17us;112us;18us;113us;19us;114us;20us;115us;21us;116us;22us;106us;23us;107us;24us;108us;25us;109us;26us;110us;0us;16412us;0us;16413us;1us;32768us;1us;60us;11us;32768us;1us;120us;12us;122us;13us;84us;23us;140us;24us;128us;31us;142us;32us;86us;33us;88us;38us;80us;39us;138us;40us;139us;14us;32768us;2us;62us;14us;118us;15us;117us;16us;111us;17us;112us;18us;113us;19us;114us;20us;115us;21us;116us;22us;106us;23us;107us;24us;108us;25us;109us;26us;110us;15us;32768us;1us;120us;3us;41us;12us;122us;13us;84us;23us;140us;24us;128us;29us;59us;31us;142us;32us;86us;33us;88us;34us;54us;36us;65us;38us;80us;39us;138us;40us;139us;15us;32768us;1us;120us;3us;41us;12us;122us;13us;84us;23us;140us;24us;128us;29us;59us;31us;142us;32us;86us;33us;88us;34us;54us;36us;65us;38us;80us;39us;138us;40us;139us;0us;16414us;1us;32768us;1us;66us;11us;32768us;1us;120us;12us;122us;13us;84us;23us;140us;24us;128us;31us;142us;32us;86us;33us;88us;38us;80us;39us;138us;40us;139us;14us;32768us;2us;68us;14us;118us;15us;117us;16us;111us;17us;112us;18us;113us;19us;114us;20us;115us;21us;116us;22us;106us;23us;107us;24us;108us;25us;109us;26us;110us;15us;32768us;1us;120us;3us;41us;12us;122us;13us;84us;23us;140us;24us;128us;29us;59us;31us;142us;32us;86us;33us;88us;34us;54us;36us;65us;38us;80us;39us;138us;40us;139us;0us;16415us;0us;16416us;0us;16417us;0us;16418us;4us;16419us;2us;127us;5us;131us;7us;133us;11us;78us;3us;16419us;5us;131us;7us;133us;11us;78us;0us;16420us;1us;16420us;2us;121us;0us;16421us;11us;32768us;1us;120us;12us;122us;13us;84us;23us;140us;24us;128us;31us;142us;32us;86us;33us;88us;38us;80us;39us;138us;40us;139us;13us;16422us;14us;118us;15us;117us;16us;111us;17us;112us;18us;113us;19us;114us;20us;115us;21us;116us;22us;106us;23us;107us;24us;108us;25us;109us;26us;110us;1us;16443us;1us;81us;11us;16449us;1us;120us;12us;122us;13us;84us;23us;140us;24us;128us;31us;142us;32us;86us;33us;88us;38us;80us;39us;138us;40us;139us;1us;32768us;2us;83us;0us;16423us;11us;32768us;1us;120us;12us;122us;13us;84us;23us;140us;24us;128us;31us;142us;32us;86us;33us;88us;38us;80us;39us;138us;40us;139us;0us;16424us;11us;32768us;1us;120us;12us;122us;13us;84us;23us;140us;24us;128us;31us;142us;32us;86us;33us;88us;38us;80us;39us;138us;40us;139us;13us;16425us;14us;118us;15us;117us;16us;111us;17us;112us;18us;113us;19us;114us;20us;115us;21us;116us;22us;106us;23us;107us;24us;108us;25us;109us;26us;110us;0us;16426us;3us;16427us;24us;108us;25us;109us;26us;110us;3us;16428us;24us;108us;25us;109us;26us;110us;0us;16429us;0us;16430us;0us;16431us;9us;16432us;18us;113us;19us;114us;20us;115us;21us;116us;22us;106us;23us;107us;24us;108us;25us;109us;26us;110us;9us;16433us;18us;113us;19us;114us;20us;115us;21us;116us;22us;106us;23us;107us;24us;108us;25us;109us;26us;110us;5us;16434us;22us;106us;23us;107us;24us;108us;25us;109us;26us;110us;5us;16435us;22us;106us;23us;107us;24us;108us;25us;109us;26us;110us;5us;16436us;22us;106us;23us;107us;24us;108us;25us;109us;26us;110us;5us;16437us;22us;106us;23us;107us;24us;108us;25us;109us;26us;110us;11us;16438us;16us;111us;17us;112us;18us;113us;19us;114us;20us;115us;21us;116us;22us;106us;23us;107us;24us;108us;25us;109us;26us;110us;13us;32768us;14us;118us;15us;117us;16us;111us;17us;112us;18us;113us;19us;114us;20us;115us;21us;116us;22us;106us;23us;107us;24us;108us;25us;109us;26us;110us;12us;16439us;15us;117us;16us;111us;17us;112us;18us;113us;19us;114us;20us;115us;21us;116us;22us;106us;23us;107us;24us;108us;25us;109us;26us;110us;14us;32768us;6us;132us;14us;118us;15us;117us;16us;111us;17us;112us;18us;113us;19us;114us;20us;115us;21us;116us;22us;106us;23us;107us;24us;108us;25us;109us;26us;110us;14us;32768us;8us;134us;14us;118us;15us;117us;16us;111us;17us;112us;18us;113us;19us;114us;20us;115us;21us;116us;22us;106us;23us;107us;24us;108us;25us;109us;26us;110us;14us;16451us;10us;136us;14us;118us;15us;117us;16us;111us;17us;112us;18us;113us;19us;114us;20us;115us;21us;116us;22us;106us;23us;107us;24us;108us;25us;109us;26us;110us;11us;32768us;1us;120us;12us;122us;13us;84us;23us;140us;24us;128us;31us;142us;32us;86us;33us;88us;38us;80us;39us;138us;40us;139us;11us;32768us;1us;120us;12us;122us;13us;84us;23us;140us;24us;128us;31us;142us;32us;86us;33us;88us;38us;80us;39us;138us;40us;139us;11us;32768us;1us;120us;12us;122us;13us;84us;23us;140us;24us;128us;31us;142us;32us;86us;33us;88us;38us;80us;39us;138us;40us;139us;11us;32768us;1us;120us;12us;122us;13us;84us;23us;140us;24us;128us;31us;142us;32us;86us;33us;88us;38us;80us;39us;138us;40us;139us;11us;32768us;1us;120us;12us;122us;13us;84us;23us;140us;24us;128us;31us;142us;32us;86us;33us;88us;38us;80us;39us;138us;40us;139us;11us;32768us;1us;120us;12us;122us;13us;84us;23us;140us;24us;128us;31us;142us;32us;86us;33us;88us;38us;80us;39us;138us;40us;139us;11us;32768us;1us;120us;12us;122us;13us;84us;23us;140us;24us;128us;31us;142us;32us;86us;33us;88us;38us;80us;39us;138us;40us;139us;11us;32768us;1us;120us;12us;122us;13us;84us;23us;140us;24us;128us;31us;142us;32us;86us;33us;88us;38us;80us;39us;138us;40us;139us;11us;32768us;1us;120us;12us;122us;13us;84us;23us;140us;24us;128us;31us;142us;32us;86us;33us;88us;38us;80us;39us;138us;40us;139us;11us;32768us;1us;120us;12us;122us;13us;84us;23us;140us;24us;128us;31us;142us;32us;86us;33us;88us;38us;80us;39us;138us;40us;139us;11us;32768us;1us;120us;12us;122us;13us;84us;23us;140us;24us;128us;31us;142us;32us;86us;33us;88us;38us;80us;39us;138us;40us;139us;11us;32768us;1us;120us;12us;122us;13us;84us;23us;140us;24us;128us;31us;142us;32us;86us;33us;88us;38us;80us;39us;138us;40us;139us;11us;32768us;1us;120us;12us;122us;13us;84us;23us;140us;24us;128us;31us;142us;32us;86us;33us;88us;38us;80us;39us;138us;40us;139us;0us;16440us;11us;32768us;1us;120us;12us;122us;13us;84us;23us;140us;24us;128us;31us;142us;32us;86us;33us;88us;38us;80us;39us;138us;40us;139us;0us;16441us;3us;32768us;1us;125us;24us;128us;38us;124us;2us;16442us;5us;131us;7us;133us;0us;16443us;3us;32768us;1us;125us;24us;128us;38us;124us;3us;32768us;2us;127us;5us;131us;7us;133us;0us;16444us;8us;32768us;1us;120us;12us;122us;23us;140us;24us;128us;31us;142us;38us;124us;39us;138us;40us;139us;2us;16445us;5us;131us;7us;133us;0us;16446us;11us;32768us;1us;120us;12us;122us;13us;84us;23us;140us;24us;128us;31us;142us;32us;86us;33us;88us;38us;80us;39us;138us;40us;139us;0us;16447us;11us;32768us;1us;120us;12us;122us;13us;84us;23us;140us;24us;128us;31us;142us;32us;86us;33us;88us;38us;80us;39us;138us;40us;139us;0us;16448us;0us;16450us;11us;32768us;1us;120us;12us;122us;13us;84us;23us;140us;24us;128us;31us;142us;32us;86us;33us;88us;38us;80us;39us;138us;40us;139us;0us;16452us;0us;16453us;0us;16454us;1us;32768us;39us;141us;0us;16455us;0us;16456us;0us;16457us;0us;16458us;|]
let _fsyacc_actionTableRowOffsets = [|0us;4us;5us;7us;8us;12us;13us;15us;16us;17us;21us;25us;28us;29us;31us;35us;38us;42us;46us;47us;50us;51us;53us;54us;57us;59us;60us;61us;63us;65us;68us;70us;72us;73us;76us;78us;80us;81us;82us;84us;87us;88us;106us;108us;109us;127us;128us;130us;148us;149us;150us;152us;153us;168us;169us;182us;183us;198us;199us;200us;202us;214us;229us;245us;261us;262us;264us;276us;291us;307us;308us;309us;310us;311us;316us;320us;321us;323us;324us;336us;350us;352us;364us;366us;367us;379us;380us;392us;406us;407us;411us;415us;416us;417us;418us;428us;438us;444us;450us;456us;462us;474us;488us;501us;516us;531us;546us;558us;570us;582us;594us;606us;618us;630us;642us;654us;666us;678us;690us;702us;703us;715us;716us;720us;723us;724us;728us;732us;733us;742us;745us;746us;758us;759us;771us;772us;773us;785us;786us;787us;788us;790us;791us;792us;793us;|]
let _fsyacc_reductionSymbolCounts = [|1us;2us;0us;2us;2us;1us;2us;1us;2us;3us;3us;4us;4us;3us;6us;6us;0us;1us;1us;3us;3us;0us;2us;3us;1us;1us;2us;2us;3us;1us;7us;5us;7us;5us;5us;1us;1us;1us;3us;4us;2us;2us;1us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;1us;3us;2us;1us;3us;2us;2us;4us;4us;0us;1us;1us;3us;1us;1us;2us;1us;1us;1us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;3us;3us;4us;5us;5us;5us;5us;5us;5us;5us;6us;6us;7us;7us;8us;8us;9us;10us;10us;10us;11us;11us;12us;12us;12us;12us;12us;12us;13us;13us;13us;14us;14us;15us;15us;15us;15us;15us;15us;15us;15us;15us;15us;15us;15us;15us;15us;15us;15us;15us;15us;15us;16us;16us;16us;17us;17us;17us;17us;17us;17us;18us;18us;19us;19us;20us;20us;20us;20us;21us;21us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;16385us;65535us;16387us;65535us;16388us;16389us;65535us;65535us;65535us;16391us;65535us;65535us;65535us;65535us;65535us;16393us;65535us;16394us;65535us;16395us;65535us;65535us;16396us;16397us;65535us;65535us;65535us;65535us;65535us;16398us;65535us;65535us;65535us;16399us;16401us;65535us;65535us;16403us;65535us;65535us;16404us;65535us;16406us;65535us;65535us;16407us;16408us;65535us;16409us;65535us;16410us;65535us;16411us;65535us;16412us;16413us;65535us;65535us;65535us;65535us;65535us;16414us;65535us;65535us;65535us;65535us;16415us;16416us;16417us;16418us;65535us;65535us;16420us;65535us;16421us;65535us;65535us;65535us;65535us;65535us;16423us;65535us;65535us;65535us;65535us;16426us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16440us;65535us;16441us;65535us;65535us;16443us;65535us;65535us;16444us;65535us;65535us;16446us;65535us;16447us;65535us;16448us;16450us;65535us;16452us;16453us;16454us;65535us;16455us;16456us;16457us;16458us;|]
let _fsyacc_reductions = lazy [|
# 409 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.program in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startMain));
# 418 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Topdecs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "CPar.fsy"
                                                               Prog _1 
                   )
# 41 "CPar.fsy"
                 : Absyn.program));
# 429 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "CPar.fsy"
                                                               [] 
                   )
# 45 "CPar.fsy"
                 : 'gentype_Topdecs));
# 439 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Topdec in
            let _2 = parseState.GetInput(2) :?> 'gentype_Topdecs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "CPar.fsy"
                                                               _1 :: _2 
                   )
# 46 "CPar.fsy"
                 : 'gentype_Topdecs));
# 451 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Vardec in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "CPar.fsy"
                                                               Vardec (fst _1, snd _1) 
                   )
# 50 "CPar.fsy"
                 : 'gentype_Topdec));
# 462 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Fundec in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "CPar.fsy"
                                                               _1 
                   )
# 51 "CPar.fsy"
                 : 'gentype_Topdec));
# 473 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Type in
            let _2 = parseState.GetInput(2) :?> 'gentype_Vardesc in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "CPar.fsy"
                                                               ((fst _2) _1, snd _2) 
                   )
# 55 "CPar.fsy"
                 : 'gentype_Vardec));
# 485 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "CPar.fsy"
                                                               ((fun t -> t), _1)                      
                   )
# 59 "CPar.fsy"
                 : 'gentype_Vardesc));
# 496 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Vardesc in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "CPar.fsy"
                                                               compose1 TypP _2                        
                   )
# 60 "CPar.fsy"
                 : 'gentype_Vardesc));
# 507 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Vardesc in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "CPar.fsy"
                                                               _2                                      
                   )
# 61 "CPar.fsy"
                 : 'gentype_Vardesc));
# 518 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Vardesc in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "CPar.fsy"
                                                               compose1 (fun t -> TypA(t, None)) _1    
                   )
# 62 "CPar.fsy"
                 : 'gentype_Vardesc));
# 529 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Vardesc in
            let _3 = parseState.GetInput(3) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "CPar.fsy"
                                                               compose1 (fun t -> TypA(t, Some _3)) _1 
                   )
# 63 "CPar.fsy"
                 : 'gentype_Vardesc));
# 541 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Vardesc in
            let _3 = parseState.GetInput(3) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "CPar.fsy"
                                                               compose1 (fun t -> TypT(t, Some _3)) _1 
                   )
# 64 "CPar.fsy"
                 : 'gentype_Vardesc));
# 553 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Vardesc in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "CPar.fsy"
                                                               compose1 (fun t -> TypT(t, None)) _1    
                   )
# 65 "CPar.fsy"
                 : 'gentype_Vardesc));
# 564 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_Paramdecs in
            let _6 = parseState.GetInput(6) :?> 'gentype_Block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "CPar.fsy"
                                                               Fundec(None,     _2, _4, _6) 
                   )
# 69 "CPar.fsy"
                 : 'gentype_Fundec));
# 577 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Type in
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_Paramdecs in
            let _6 = parseState.GetInput(6) :?> 'gentype_Block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "CPar.fsy"
                                                               Fundec(Some(_1), _2, _4, _6) 
                   )
# 70 "CPar.fsy"
                 : 'gentype_Fundec));
# 591 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "CPar.fsy"
                                                               [] 
                   )
# 74 "CPar.fsy"
                 : 'gentype_Paramdecs));
# 601 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Paramdecs1 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "CPar.fsy"
                                                               _1 
                   )
# 75 "CPar.fsy"
                 : 'gentype_Paramdecs));
# 612 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Vardec in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "CPar.fsy"
                                                               [_1]     
                   )
# 79 "CPar.fsy"
                 : 'gentype_Paramdecs1));
# 623 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Vardec in
            let _3 = parseState.GetInput(3) :?> 'gentype_Paramdecs1 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "CPar.fsy"
                                                               _1 :: _3 
                   )
# 80 "CPar.fsy"
                 : 'gentype_Paramdecs1));
# 635 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_StmtOrDecSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "CPar.fsy"
                                                               Block _2 
                   )
# 84 "CPar.fsy"
                 : 'gentype_Block));
# 646 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "CPar.fsy"
                                                               [] 
                   )
# 88 "CPar.fsy"
                 : 'gentype_StmtOrDecSeq));
# 656 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Stmt in
            let _2 = parseState.GetInput(2) :?> 'gentype_StmtOrDecSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "CPar.fsy"
                                                               Stmt _1 :: _2 
                   )
# 89 "CPar.fsy"
                 : 'gentype_StmtOrDecSeq));
# 668 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Vardec in
            let _3 = parseState.GetInput(3) :?> 'gentype_StmtOrDecSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "CPar.fsy"
                                                               Dec (fst _1, snd _1) :: _3 
                   )
# 90 "CPar.fsy"
                 : 'gentype_StmtOrDecSeq));
# 680 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_StmtM in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "CPar.fsy"
                                                               _1 
                   )
# 94 "CPar.fsy"
                 : 'gentype_Stmt));
# 691 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_StmtU in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "CPar.fsy"
                                                               _1 
                   )
# 95 "CPar.fsy"
                 : 'gentype_Stmt));
# 702 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "CPar.fsy"
                                                               Expr(_1)             
                   )
# 99 "CPar.fsy"
                 : 'gentype_StmtM));
# 713 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "CPar.fsy"
                                                               Return None          
                   )
# 100 "CPar.fsy"
                 : 'gentype_StmtM));
# 723 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "CPar.fsy"
                                                               Return(Some(_2))     
                   )
# 101 "CPar.fsy"
                 : 'gentype_StmtM));
# 734 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "CPar.fsy"
                                                               _1                   
                   )
# 102 "CPar.fsy"
                 : 'gentype_StmtM));
# 745 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_StmtM in
            let _7 = parseState.GetInput(7) :?> 'gentype_StmtM in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "CPar.fsy"
                                                               If(_3, _5, _7)       
                   )
# 103 "CPar.fsy"
                 : 'gentype_StmtM));
# 758 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_StmtM in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "CPar.fsy"
                                                               While(_3, _5)        
                   )
# 104 "CPar.fsy"
                 : 'gentype_StmtM));
# 770 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_StmtM in
            let _7 = parseState.GetInput(7) :?> 'gentype_StmtU in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "CPar.fsy"
                                                               If(_3, _5, _7)       
                   )
# 108 "CPar.fsy"
                 : 'gentype_StmtU));
# 783 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_Stmt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "CPar.fsy"
                                                               If(_3, _5, Block []) 
                   )
# 109 "CPar.fsy"
                 : 'gentype_StmtU));
# 795 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_StmtU in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "CPar.fsy"
                                                               While(_3, _5)        
                   )
# 110 "CPar.fsy"
                 : 'gentype_StmtU));
# 807 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Access in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "CPar.fsy"
                                                               Access _1           
                   )
# 114 "CPar.fsy"
                 : 'gentype_Expr));
# 818 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ExprNotAccess in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "CPar.fsy"
                                                               _1                  
                   )
# 115 "CPar.fsy"
                 : 'gentype_Expr));
# 829 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_AtExprNotAccess in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "CPar.fsy"
                                                               _1                  
                   )
# 119 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 840 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Access in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "CPar.fsy"
                                                               Assign(_1, _3)      
                   )
# 120 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 852 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_Exprs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "CPar.fsy"
                                                               Call(_1, _3)        
                   )
# 121 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 864 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "CPar.fsy"
                                                               Prim1("!", _2)      
                   )
# 122 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 875 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "CPar.fsy"
                                                               Prim1("printi", _2) 
                   )
# 123 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 886 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "CPar.fsy"
                                                               Prim1("printc", nl) 
                   )
# 124 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 896 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "CPar.fsy"
                                                               Prim2("+",  _1, _3) 
                   )
# 125 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 908 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "CPar.fsy"
                                                               Prim2("-",  _1, _3) 
                   )
# 126 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 920 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "CPar.fsy"
                                                               Prim2("*",  _1, _3) 
                   )
# 127 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 932 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "CPar.fsy"
                                                               Prim2("/",  _1, _3) 
                   )
# 128 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 944 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "CPar.fsy"
                                                               Prim2("%",  _1, _3) 
                   )
# 129 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 956 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "CPar.fsy"
                                                               Prim2("==", _1, _3) 
                   )
# 130 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 968 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "CPar.fsy"
                                                               Prim2("!=", _1, _3) 
                   )
# 131 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 980 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "CPar.fsy"
                                                               Prim2(">",  _1, _3) 
                   )
# 132 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 992 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "CPar.fsy"
                                                               Prim2("<",  _1, _3) 
                   )
# 133 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1004 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "CPar.fsy"
                                                               Prim2(">=", _1, _3) 
                   )
# 134 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1016 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "CPar.fsy"
                                                               Prim2("<=", _1, _3) 
                   )
# 135 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1028 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "CPar.fsy"
                                                               Andalso(_1, _3)     
                   )
# 136 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1040 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "CPar.fsy"
                                                               Orelse(_1, _3)      
                   )
# 137 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1052 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Const in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "CPar.fsy"
                                                               CstI _1             
                   )
# 141 "CPar.fsy"
                 : 'gentype_AtExprNotAccess));
# 1063 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_ExprNotAccess in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "CPar.fsy"
                                                               _2                  
                   )
# 142 "CPar.fsy"
                 : 'gentype_AtExprNotAccess));
# 1074 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Access in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "CPar.fsy"
                                                               Addr _2             
                   )
# 143 "CPar.fsy"
                 : 'gentype_AtExprNotAccess));
# 1085 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "CPar.fsy"
                                                               AccVar _1           
                   )
# 147 "CPar.fsy"
                 : 'gentype_Access));
# 1096 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Access in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "CPar.fsy"
                                                               _2                  
                   )
# 148 "CPar.fsy"
                 : 'gentype_Access));
# 1107 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Access in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "CPar.fsy"
                                                               AccDeref (Access _2)
                   )
# 149 "CPar.fsy"
                 : 'gentype_Access));
# 1118 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_AtExprNotAccess in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "CPar.fsy"
                                                               AccDeref _2         
                   )
# 150 "CPar.fsy"
                 : 'gentype_Access));
# 1129 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Access in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "CPar.fsy"
                                                               AccIndex(_1, _3)    
                   )
# 151 "CPar.fsy"
                 : 'gentype_Access));
# 1141 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Access in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "CPar.fsy"
                                                               TupIndex(_1, _3)    
                   )
# 152 "CPar.fsy"
                 : 'gentype_Access));
# 1153 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "CPar.fsy"
                                                               []       
                   )
# 156 "CPar.fsy"
                 : 'gentype_Exprs));
# 1163 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Exprs1 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "CPar.fsy"
                                                               _1       
                   )
# 157 "CPar.fsy"
                 : 'gentype_Exprs));
# 1174 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "CPar.fsy"
                                                               [_1]     
                   )
# 161 "CPar.fsy"
                 : 'gentype_Exprs1));
# 1185 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Exprs1 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "CPar.fsy"
                                                               _1 :: _3 
                   )
# 162 "CPar.fsy"
                 : 'gentype_Exprs1));
# 1197 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "CPar.fsy"
                                                               _1       
                   )
# 166 "CPar.fsy"
                 : 'gentype_Const));
# 1208 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "CPar.fsy"
                                                               _1       
                   )
# 167 "CPar.fsy"
                 : 'gentype_Const));
# 1219 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "CPar.fsy"
                                                               - _2     
                   )
# 168 "CPar.fsy"
                 : 'gentype_Const));
# 1230 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "CPar.fsy"
                                                               -1       
                   )
# 169 "CPar.fsy"
                 : 'gentype_Const));
# 1240 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "CPar.fsy"
                                                               TypI     
                   )
# 173 "CPar.fsy"
                 : 'gentype_Type));
# 1250 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "CPar.fsy"
                                                               TypC     
                   )
# 174 "CPar.fsy"
                 : 'gentype_Type));
|]
# 1261 "CPar.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 44;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.program =
    engine lexer lexbuf 0 :?> _
